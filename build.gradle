apply plugin: 'docker'

// Stick to Camden.RELEAS - https://spring.io/blog/2016/09/26/spring-cloud-camden-release-and-brixton-sr6-are-available

buildscript {

    ext {
        springBootVersion = '1.4.3.RELEASE'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath "io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE"
    }

}

group= 'com.akolov.curi'

allprojects {

    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-config:1.2.2.RELEASE'
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR4"
        }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '2.9'
    }

    apply plugin: 'idea'

    //group of docker images. Don't include repository here, tag/push later
    group = 'kolov'
    version = '0.1-SNAPSHOT'

    project.ext {
        dockerRepository = 'localhost:5000'
    }
}

def tagTask(group, applicationName, version, push) {

    def result = []
    if (project.hasProperty('dockerRepository')) {

        def dockerRepository = project.dockerRepository
        def existingTag = "$group/$applicationName:$version"
        def toCreateTag = "$dockerRepository/$group/$applicationName:latest"


        def task1 = tasks.create("tag${applicationName}Image", Exec) {
            println("Creating tag $toCreateTag from $existingTag")
            commandLine 'docker', 'tag', "$existingTag", "$toCreateTag"
        }
        result.add(task1)

        if (push) {
            def task2 = tasks.create("push${applicationName}Image", Exec) {
                println("Pushing $toCreateTag")
                commandLine 'docker', 'push', "$toCreateTag"
            }
            result.add(task2)
        }
        return result
    }
}

task buildImages() {
    dependsOn ':app:buildDocker',
            'config-server:buildDocker',
            'service-users:buildDocker'
}
