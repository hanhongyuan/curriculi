apply plugin: 'scala'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'


dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile("org.springframework.boot:spring-boot-devtools")
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
    compile('org.springframework.boot:spring-boot-starter-actuator')

    compile("org.hibernate:hibernate-validator")
    compile("org.scala-lang:scala-library:2.11.7")
    compile("com.fasterxml.jackson.module:jackson-module-scala_2.11:2.8.4")

    testCompile("org.scalatest:scalatest:1.3")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit")
    testCompile("org.mockito:mockito-all:1.10.19")
}

task buildDocker(type: Docker) {
    push = false
    applicationName = 'curriculi-service-users'
    dockerfile = file('src/main/docker/Dockerfile')

    doFirst {
        copy {
            from jar
            into stageDir
        }
    }

    doLast {
        tagTask(project.group, applicationName, version, true).execute()
    }
}

def tagTask(group, applicationName, version, push) {
    if (project.hasProperty('dockerRepository')) {

        def dockerRepository = project.dockerRepository
        def existingTag = "$group/$applicationName:$version"
        def toCreateTag = "$dockerRepository/$group/$applicationName:latest"

        return tasks.create("tag${applicationName}Image", Exec) {
            println("Creating tag $toCreateTag from $existingTag")
            commandLine 'docker', 'tag',
                    "$existingTag",
                    "$toCreateTag"
            if (push) {
                println("Pushing $toCreateTag ")
                commandLine 'docker', 'push', "$toCreateTag"
            }
        }
    }
}
