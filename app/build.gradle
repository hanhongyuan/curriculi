plugins {
    id 'com.craigburke.bower-installer' version '2.5.1'
}

apply plugin: 'scala'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'





ext {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}


jar {
    baseName = 'curriculi'
    version = '0.0.1-SNAPSHOT'
}

test {
    exclude '**/*IT.class'
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/libs-release" }
}

dependencies {

    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.cloud:spring-cloud-starter-zuul")
    compile('org.springframework.cloud:spring-cloud-starter-feign')

    compile("org.springframework.session:spring-session:1.3.0.RELEASE")
    compile("org.springframework.session:spring-session-data-redis:1.2.2.RELEASE")
    compile("biz.paluch.redis:lettuce:3.5.0.Final")

    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-cloud-connectors")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.security.oauth:spring-security-oauth2")
    compile("org.springframework.boot:spring-boot-starter-actuator")


    compile("org.hibernate:hibernate-validator")
    compile("org.scala-lang:scala-library:2.11.7")
    compile("org.webjars:bootstrap:3.1.1")
    compile("com.fasterxml.jackson.module:jackson-module-scala_2.11:2.8.4")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit")
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Camden.RELEASE'
    }
}




task buildDocker(type: Docker) {

    push = false
    applicationName = 'curriculi'
    dockerfile = file('src/main/docker/Dockerfile')

    doFirst {
        copy {
            from jar
            into stageDir
        }
    }

    doLast {
        tagTask(applicationName, version).each { t -> t.execute() }
    }
}

